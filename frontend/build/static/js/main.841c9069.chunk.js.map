{"version":3,"sources":["Login.tsx","Flavors.tsx","Homepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Login","useState","email","setEmail","password","setPassword","onSubmit","console","log","type","value","onChange","e","target","currFlavors","name","qty","Flavors","className","map","x","Homepage","App","to","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRA6BeA,EAzBD,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACXC,EADW,KACJC,EADI,OAEcF,mBAAS,IAFvB,mBAEXG,EAFW,KAEDC,EAFC,KASlB,OACE,8BACE,uBAAMC,SAPV,WACEC,QAAQC,IAAI,SAMV,UACE,2CAEE,uBAAOC,KAAK,QAAQC,MAASR,EAAOS,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOH,aAEzE,gCACE,uBAAOD,KAAK,WAAWC,MAASN,EAAUO,SAAU,SAACC,GAAD,OAAOP,EAAYO,EAAEC,OAAOH,YAElF,uBAAOD,KAAK,SAASC,MAAQ,iBCd/BI,G,MAAwB,CAC5B,CAAEC,KAAM,UAAWC,IAAK,GACxB,CAAED,KAAM,YAAaC,IAAK,IAC1B,CAAED,KAAM,YAAaC,IAAK,GAC1B,CAAED,KAAM,aAAcC,IAAK,GAC3B,CAAED,KAAM,aAAcC,IAAK,MAcdC,EAXC,WACd,OAAO,gCACL,qBAAKC,UAAU,WAAf,2BACA,qBAAKA,UAAU,QAAf,SACGJ,EAAYK,KAAI,SAAAC,GAAC,OAChBA,EAAEJ,IAAM,EAAI,2CAAa,mBAAIE,UAAU,OAAd,SAAsBE,EAAEJ,MAArC,cAAwD,mBAAGE,UAAU,OAAb,SAAqBE,EAAEL,OAA/E,eACR,iDAAmB,mBAAGG,UAAU,OAAb,SAAqBE,EAAEL,OAA1C,kBCNGM,EAZE,WACf,OAAO,sBAAKH,UAAU,YAAf,UACL,qBAAKA,UAAU,aAAf,SACE,sBAAKA,UAAU,QAAf,wBAAkC,mBAAGA,UAAU,UAAb,oCAEpC,qBAAKA,UAAU,gBAAf,SACE,cAAC,EAAD,UCAS,SAASI,IACtB,OACE,cAAC,IAAD,UACE,gCACE,qBAAIJ,UAAU,OAAd,UACE,oBAAIA,UAAU,OAAd,SACE,cAAC,IAAD,CAAMA,UAAU,OAAOK,GAAG,QAA1B,oBAEF,oBAAIL,UAAU,OAAd,SACE,cAAC,IAAD,CAAMA,UAAU,OAAOK,GAAG,SAA1B,yBAUJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,SAAZ,SACE,cAAC,EAAD,cCjCZ,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.841c9069.chunk.js","sourcesContent":["import React, { useState } from 'react';\n//import { useForm } from 'react-hook-form';\n\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  function handleSubmit() {\n    console.log(\"here\");\n    email==='a@a.com'?<p> correct</p>:<p>wrong</p>\n  } \n\n  return (\n    <div>\n      <form onSubmit = {handleSubmit}>\n        <label>\n          Email:\n          <input type=\"email\" value = {email} onChange={(e) => setEmail(e.target.value)} />\n        </label>\n        <label>\n          <input type=\"password\" value = {password} onChange={(e) => setPassword(e.target.value)} />\n        </label>\n        <input type=\"submit\" value = \"Submit\" />\n      </form>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport './Main.css';\n\n\ntype Flavor = {\n  name: string;\n  qty: number\n}\n\nconst currFlavors: Flavor[] = [\n  { name: \"vanilla\", qty: 4 },\n  { name: \"chocolate\", qty: 10 },\n  { name: \"mint chip\", qty: 3 },\n  { name: \"strawberry\", qty: 0 },\n  { name: \"phish food\", qty: 40 }\n]\n\nconst Flavors = () => {\n  return <div>\n    <div className=\"subtitle\">current stock</div>\n    <div className=\"chart\">\n      {currFlavors.map(x =>\n        x.qty > 0 ? <div>we have < p className=\"emph\">{x.qty}</p> scoops of <p className=\"emph\">{x.name}</p> in stock</div>\n          : <div>we are out of <p className=\"emph\">{x.name}</p> :(</div>)}\n    </div>\n  </div >;\n}\n\nexport default Flavors;","import React from 'react';\nimport Flavors from './Flavors';\nimport './Main.css';\n\n\nconst Homepage = () => {\n  return <div className=\"container\">\n    <div className='title-cont'>\n      <div className=\"title\">welcome to <p className='supreme'>Supreme Ice Cream</p></div>\n    </div>\n    <div className=\"flavors-chart\">\n      <Flavors />\n    </div>\n\n  </div>;\n}\n\nexport default Homepage;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Login from './Login';\nimport Homepage from './Homepage';\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <ul className=\"list\">\n          <li className=\"item\">\n            <Link className=\"link\" to=\"/home\">Home</Link>\n          </li>\n          <li className=\"item\">\n            <Link className=\"link\" to=\"/login\">Log In</Link>\n          </li>\n        </ul>\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route path=\"/home\">\n            <Homepage />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}